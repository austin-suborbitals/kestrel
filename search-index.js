var searchIndex = {};
searchIndex["kestrel"] = {"doc":"","items":[[5,"entry","kestrel","",null,null]],"paths":[]};
searchIndex["peregrine"] = {"doc":"","items":[[0,"libc","peregrine","",null,null],[0,"memory","peregrine::libc","",null,null],[3,"IOVec","peregrine::libc::memory","Defines an I/O Vector that contains a pointer and size.",null,null],[12,"ptr","","",0,null],[12,"size","","",0,null],[5,"__aeabi_memclr","","",null,null],[5,"memset","","Set a region of memory to a given byte value.",null,null],[5,"memcmp","","Compares two regions of memory.",null,null],[5,"memcmp_t","","Compare regions of memory with a generic iterator size.",null,null],[5,"memcpy","","Copies one region of memory to another.",null,null],[11,"new","","Instantiates a new IOVec given the pointer and size.",0,null],[11,"from_addr","","Instantiates a new IOVec given a u32 address and size",0,{"inputs":[{"name":"u32"},{"name":"usize"}],"output":{"name":"iovec"}}],[11,"convert_ptr","","Casts the contained pointer to a pointer of the given generic type.",0,null],[0,"mcus","peregrine","",null,null],[0,"cortexm4","peregrine::mcus","",null,null],[0,"core","peregrine::mcus::cortexm4","",null,null],[0,"fpu","peregrine::mcus::cortexm4::core","",null,null],[3,"Access","peregrine::mcus::cortexm4::core::fpu","Pointer wrapper that implements the Access operations",null,null],[12,"0","","",1,null],[3,"Unit","","Pointer wrapper that implements the Unit operations",null,null],[12,"0","","",2,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"read_access","","Reads the contents (as `u32`) of the `access` register at relative address 0x0",1,null],[11,"disallow","","Writes the value `0x0` to the `access` register at relative address 0x0 and offset 20 bits.",1,null],[11,"full_access","","Writes the value `0x3` to the `access` register at relative address 0x0 and offset 20 bits.",1,null],[11,"priviledged","","Writes the value `0x1` to the `access` register at relative address 0x0 and offset 20 bits.",1,null],[11,"needs_init","","states the `Access` needs to be initialized",1,null],[11,"init","","",1,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"read_context","","Reads the contents (as `u32`) of the `context` register at relative address 0x0",2,null],[11,"disable_automatic_state_saving","","Writes the value `0x1` to the `context` register at relative address 0x0 and offset 31 bits.",2,null],[11,"enable_automatic_state_saving","","Writes the value `0x1` to the `context` register at relative address 0x0 and offset 31 bits.",2,null],[11,"disable_lazy_state_saving","","Writes the value `0x1` to the `context` register at relative address 0x0 and offset 30 bits.",2,null],[11,"enable_lazy_state_saving","","Writes the value `0x1` to the `context` register at relative address 0x0 and offset 30 bits.",2,null],[11,"read_context_address","","Reads the contents (as `u32`) of the `context_address` register at relative address 0x4",2,null],[11,"needs_init","","states the `Unit` will not be initialized",2,null],[11,"init","","Should not be called as it does nothing. Here to support the init interface",2,null],[0,"systick","peregrine::mcus::cortexm4::core","",null,null],[3,"SysTick","peregrine::mcus::cortexm4::core::systick","Pointer wrapper that implements the SysTick operations",null,null],[12,"0","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"read_calibration","","Reads the contents (as `u32`) of the `calibration` register at relative address 0x8",3,null],[11,"read_reload","","Reads the contents (as `u32`) of the `reload` register at relative address 0x4",3,null],[11,"reload","","Writes the value of the given argument to the `reload` register at relative address 0x4 and offset 0 bits.",3,null],[11,"read_status_and_control","","Reads the contents (as `u32`) of the `status_and_control` register at relative address 0x0",3,null],[11,"set_enable_bit","","Writes the value `0x1` to the `status_and_control` register at relative address 0x0 and offset 0 bits.",3,null],[11,"unset_enable_bit","","Writes the value `0x0` to the `status_and_control` register at relative address 0x0 and offset 0 bits.",3,null],[11,"set_exception_enable_bit","","Writes the value `0x1` to the `status_and_control` register at relative address 0x0 and offset 1 bits.",3,null],[11,"unset_exception_enable_bit","","Writes the value `0x0` to the `status_and_control` register at relative address 0x0 and offset 1 bits.",3,null],[11,"needs_init","","states the `SysTick` needs to be initialized",3,null],[11,"init","","",3,null],[11,"enable","","Enables ticking of the counter",3,null],[11,"disable","","Disables ticking of the counter. Does not reset the value.",3,null],[11,"has_reset","","Detect if the counter has hit 0 since it was last read. Used if the interrupt is not enabled.",3,null],[11,"enable_interrupt","","Enables the SysTick exception when the counter hits 0.",3,null],[11,"disable_interrupt","","Disables the SysTick exception.",3,null],[11,"set_tick_reload_value","","Sets the value the module will reload with when resetting.",3,null],[11,"current_tick","","Fetch the current value of the countdown.",3,null],[11,"has_calibration_value","","Polls for whether the 10ms calibration value is reliable",3,null],[11,"calibration_value","","Fetches the 10ms calibration value.",3,null],[0,"kinetis","peregrine::mcus::cortexm4","",null,null],[0,"k64","peregrine::mcus::cortexm4::kinetis","",null,null],[3,"K64NVIC","peregrine::mcus::cortexm4::kinetis::k64","NVIC interface generated for the K64 mcu.",null,null],[12,"iser","","",4,null],[12,"icer","","",4,null],[12,"ispr","","",4,null],[12,"icpr","","",4,null],[12,"iabr","","",4,null],[12,"ipr","","",4,null],[3,"K64","","Generated definition of the K64 MCU",null,null],[12,"nvic","","",5,null],[12,"wdog","","",5,null],[12,"systick","","",5,null],[12,"fpu_coproc","","",5,null],[12,"fpu","","",5,null],[3,"Interrupts","","",null,null],[5,"init","","Generated reset handler that creates a new mcu, calls mcu.init(), and calls\nthe function given to `bootloader_exit` with a reference to the mcu instance.",null,{"inputs":[],"output":null}],[0,"wdog","","",null,null],[3,"Watchdog","peregrine::mcus::cortexm4::kinetis::k64::wdog","Pointer wrapper that implements the Watchdog operations",null,null],[12,"0","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[18,"DISABLED","peregrine::mcus::cortexm4::kinetis::k64","",6,null],[18,"ENABLED","","",6,null],[11,"read_prescaler","peregrine::mcus::cortexm4::kinetis::k64::wdog","Reads the contents (as `u32`) of the `prescaler` register at relative address 0x16",6,null],[11,"set_prescaler","","Writes the value of the given argument to the `prescaler` register at relative address 0x16 and offset 8 bits.",6,null],[18,"REFRESH_VALUE_ONE","peregrine::mcus::cortexm4::kinetis::k64","",6,null],[18,"REFRESH_VALUE_TWO","","",6,null],[11,"refresh","peregrine::mcus::cortexm4::kinetis::k64::wdog","Consecutively writes the values `[REFRESH_VALUE_ONE, REFRESH_VALUE_TWO]` to the `refresh` register at relative address 0xC and offset 0 bits.",6,null],[11,"read_reset_count","","Reads the contents (as `u32`) of the `reset_count` register at relative address 0x14",6,null],[11,"clear_reset_count","","Writes the value `0xFFFF` to the `reset_count` register at relative address 0x14 and offset 0 bits.",6,null],[18,"STATUS_CONTROL_ALT_CLOCK_SRC","peregrine::mcus::cortexm4::kinetis::k64","",6,null],[18,"STATUS_CONTROL_BYTE_TEST","","",6,null],[18,"STATUS_CONTROL_LPO_CLOCK_SRC","","",6,null],[18,"STATUS_CONTROL_QUICK_TEST","","",6,null],[11,"read_status_control","peregrine::mcus::cortexm4::kinetis::k64::wdog","Reads the contents (as `u16`) of the `status_control` register at relative address 0x0",6,null],[11,"disable","","Writes the value `DISABLED` to the `status_control` register at relative address 0x0 and offset 0 bits.",6,null],[11,"enable","","Writes the value `ENABLED` to the `status_control` register at relative address 0x0 and offset 0 bits.",6,null],[11,"use_alt_clock","","Writes the value `STATUS_CONTROL_ALT_CLOCK_SRC` to the `status_control` register at relative address 0x0 and offset 1 bits.",6,null],[11,"use_lpo_clock","","Writes the value `STATUS_CONTROL_LPO_CLOCK_SRC` to the `status_control` register at relative address 0x0 and offset 1 bits.",6,null],[11,"reset_breadcrumb_mode","","Writes the value `ENABLED` to the `status_control` register at relative address 0x0 and offset 2 bits.",6,null],[11,"reset_default_mode","","Writes the value `DISABLED` to the `status_control` register at relative address 0x0 and offset 2 bits.",6,null],[11,"disable_windowing","","Writes the value `DISABLED` to the `status_control` register at relative address 0x0 and offset 3 bits.",6,null],[11,"enable_windowing","","Writes the value `ENABLED` to the `status_control` register at relative address 0x0 and offset 3 bits.",6,null],[11,"allow_updates","","Writes the value `ENABLED` to the `status_control` register at relative address 0x0 and offset 4 bits.",6,null],[11,"disallow_updates","","Writes the value `DISABLED` to the `status_control` register at relative address 0x0 and offset 4 bits.",6,null],[11,"disable_in_debug","","Writes the value `DISABLED` to the `status_control` register at relative address 0x0 and offset 5 bits.",6,null],[11,"enable_in_debug","","Writes the value `ENABLED` to the `status_control` register at relative address 0x0 and offset 5 bits.",6,null],[11,"disable_in_stop","","Writes the value `DISABLED` to the `status_control` register at relative address 0x0 and offset 6 bits.",6,null],[11,"enable_in_stop","","Writes the value `ENABLED` to the `status_control` register at relative address 0x0 and offset 6 bits.",6,null],[11,"disable_in_wait","","Writes the value `DISABLED` to the `status_control` register at relative address 0x0 and offset 7 bits.",6,null],[11,"enable_in_wait","","Writes the value `ENABLED` to the `status_control` register at relative address 0x0 and offset 7 bits.",6,null],[11,"run_self_test","","Writes the value `ENABLED` to the `status_control` register at relative address 0x0 and offset 10 bits.",6,null],[11,"use_byte_test","","Writes the value `STATUS_CONTROL_BYTE_TEST` to the `status_control` register at relative address 0x0 and offset 11 bits.",6,null],[11,"use_quick_test","","Writes the value `STATUS_CONTROL_QUICK_TEST` to the `status_control` register at relative address 0x0 and offset 11 bits.",6,null],[11,"use_byte_one_test","","Writes the value `0x1` to the `status_control` register at relative address 0x0 and offset 12 bits.",6,null],[11,"use_byte_three_test","","Writes the value `0x3` to the `status_control` register at relative address 0x0 and offset 12 bits.",6,null],[11,"use_byte_two_test","","Writes the value `0x2` to the `status_control` register at relative address 0x0 and offset 12 bits.",6,null],[11,"use_byte_zero_test","","Writes the value `0x0` to the `status_control` register at relative address 0x0 and offset 12 bits.",6,null],[11,"disable_self_test","","Writes the value `DISABLED` to the `status_control` register at relative address 0x0 and offset 14 bits.",6,null],[11,"enable_self_test","","Writes the value `ENABLED` to the `status_control` register at relative address 0x0 and offset 14 bits.",6,null],[11,"read_status_control_low","","Reads the contents (as `u16`) of the `status_control_low` register at relative address 0x2",6,null],[11,"set_interrupt_flag","","Writes the value `ENABLED` to the `status_control_low` register at relative address 0x2 and offset 15 bits.",6,null],[11,"read_timeout","","Reads the contents (as `u32`) of the `timeout` register at relative address 0x4",6,null],[11,"set_timeout","","Writes the value of the given argument to the `timeout` register at relative address 0x4 and offset 0 bits.",6,null],[11,"read_timer_output","","Reads the contents (as `u32`) of the `timer_output` register at relative address 0x10",6,null],[11,"set_timer_output","","Writes the value of the given argument to the `timer_output` register at relative address 0x10 and offset 0 bits.",6,null],[18,"UNLOCK_VALUE_ONE","peregrine::mcus::cortexm4::kinetis::k64","",6,null],[18,"UNLOCK_VALUE_TWO","","",6,null],[11,"unlock","peregrine::mcus::cortexm4::kinetis::k64::wdog","Consecutively writes the values `[UNLOCK_VALUE_ONE, UNLOCK_VALUE_TWO]` to the `unlock` register at relative address 0xE and offset 0 bits.",6,null],[11,"read_window","","Reads the contents (as `u32`) of the `window` register at relative address 0x8",6,null],[11,"set_window","","Writes the value of the given argument to the `window` register at relative address 0x8 and offset 0 bits.",6,null],[11,"needs_init","","states the `Watchdog` will not be initialized",6,null],[11,"init","","Should not be called as it does nothing. Here to support the init interface",6,null],[7,"INTERRUPTS","peregrine::mcus::cortexm4::kinetis::k64","",null,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"enable_irq","","Enables the given IRQ in the NVIC.",4,null],[11,"disable_irq","","Disables the given IRQ in the NVIC.",4,null],[11,"is_enabled","","Returns whether the given IRQ is enabled or not.",4,null],[11,"set_pending","","Sets the given IRQ status to pending in the NVIC.",4,null],[11,"clear_pending","","Removes the given IRQ from the pending list.",4,null],[11,"is_pending","","Returns whether the given IRQ is pending or not.",4,null],[11,"is_active","","Returns whether the given IRQ is actively running or not.",4,null],[11,"set_priority","","Sets the given IRQ&#39;s priority to the given value in the NVIC.",4,null],[11,"get_priority","","Gets the given IRQ&#39;s priority from the NVIC.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"new","","Creates a new MCU instance with all peripherals set to the correct addresses.",5,{"inputs":[],"output":{"name":"k64"}}],[11,"copy_data_section","","Copies the `.data` section (specified via the `data` block) to main memory",5,null],[11,"null_bss","","Zeroes all bytes in the `.bss` section as specified in the `bss` block.",5,null],[11,"init","","Initializes the mcu given then memory addresses and peripherals provided to the macro.",5,null],[11,"get_nvic","","Fetches the NVIC for this specific MCU.",5,null],[11,"stack_memory","","Get stack region information.",5,null],[11,"heap_memory","","Get heap region information.",5,null],[0,"os","peregrine","",null,null],[0,"error","peregrine::os","",null,null],[0,"unwind","peregrine::os::error","",null,null],[5,"__aeabi_unwind_cpp_pr0","peregrine::os::error::unwind","",null,null],[5,"__aeabi_unwind_cpp_pr1","","",null,null],[5,"rust_begin_unwind","","",null,null],[0,"mman","peregrine::os","",null,null],[5,"find_first_set","peregrine::os::mman","",null,{"inputs":[{"name":"usize"}],"output":{"name":"u8"}}],[5,"find_last_set","","",null,{"inputs":[{"name":"usize"}],"output":{"name":"u8"}}],[0,"traits","peregrine","",null,null],[8,"MCU","peregrine::traits","Enables generic handling and initialization of an MCU.",null,null],[10,"get_nvic","","Returns the NVIC interface for the MCU.\nThe NVIC returned must satisfy the NVIC trait.",7,null],[10,"stack_memory","","Gives an IOVec describing the region of memory dedicated to stack.",7,null],[10,"heap_memory","","Gives an IOVec describing the region of memory dedicated to the heap.",7,null],[8,"NVIC","","Standard interface to the Nested Vector Interrupt Controller.",null,null],[10,"enable_irq","","Enables the given IRQ.",8,null],[10,"disable_irq","","Disables the given IRQ.",8,null],[10,"is_enabled","","Check whether the given IRQ is enabled.",8,null],[10,"set_pending","","Set the given IRQ as pending, and to be run when priorities dictate.",8,null],[10,"clear_pending","","Clear the given IRQ from the pending list.",8,null],[10,"is_pending","","Check whether the given IRQ is pending.",8,null],[10,"is_active","","Check if the given IRQ is currently being serviced;",8,null],[10,"set_priority","","Set the priority of the given IRQ.",8,null],[10,"get_priority","","Gets the priority of the given IRQ.",8,null],[8,"SysTick","","Enables generic handling and initialization of a SysTick core module.",null,null],[10,"enable","","This function should enable the ticking of the SysTick module.",9,null],[10,"disable","","This function should disable the ticking of the SysTick module. No resetting should be done\nunless specified by the mcu&#39;s manual.",9,null],[10,"has_reset","","This function should indicate if the module has counted to 0 since the last time\nthe status (or equivalent) register has been read. Used when interrupts are disabled.",9,null],[10,"enable_interrupt","","This function should enable any interrupts availble to the module. Typically an\nexception when the module hits 0.",9,null],[10,"disable_interrupt","","Disables the SysTick exception. No other side effects should be done, unless required to\nexecute the disabling.",9,null],[10,"set_tick_reload_value","","This function should set the value from which the counter will tick.",9,null],[10,"current_tick","","This function should return the current value of the countdown. If this cannot be accessed,\n(-1) as usize should be returned.",9,null],[10,"has_calibration_value","","This function should indicate if the provided calibration value is reliable, or given at all.",9,null],[10,"calibration_value","","This function should return the 10ms calibration value, regardless of whether it is valid\nor not. The caller is responsible for checking its validity.",9,null]],"paths":[[3,"IOVec"],[3,"Access"],[3,"Unit"],[3,"SysTick"],[3,"K64NVIC"],[3,"K64"],[3,"Watchdog"],[8,"MCU"],[8,"NVIC"],[8,"SysTick"]]};
searchIndex["dynamo"] = {"doc":"","items":[[5,"plugin_registrar","dynamo","",null,{"inputs":[{"name":"registry"}],"output":null}],[0,"parser","","",null,null],[3,"CommonParser","dynamo::parser","The common parser functions used across this crate.",null,null],[12,"parser","","",0,null],[12,"begin_segment","","",0,null],[4,"StaticValue","","Tuple type representing a static value parsed from the input.",null,null],[13,"Int","","",1,null],[13,"Uint","","",1,null],[13,"Float","","",1,null],[13,"Str","","",1,null],[13,"Ident","","",1,null],[13,"Path","","",1,null],[13,"Error","","",1,null],[8,"HasMinMax","","Trait used in register/value sizing and conversion.",null,null],[10,"max_value","","",2,{"inputs":[],"output":{"name":"t"}}],[10,"min_value","","",2,{"inputs":[],"output":{"name":"t"}}],[8,"Narrow","","Simple trait to support &quot;safe&quot; narrowing (via truncation) of a u32 to a u16 or u8.",null,null],[10,"narrow","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"ToAstType","","Trait for types that can convert themselves into ast types.",null,null],[10,"to_type","","",4,{"inputs":[],"output":{"name":"p"}}],[10,"to_lit","","",4,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[10,"to_arg","","",4,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"clone","","",1,null],[11,"default_uint","","",1,{"inputs":[],"output":{"name":"staticvalue"}}],[11,"to_string","","",1,null],[11,"get_span","","",1,null],[11,"fmt","","",1,null],[11,"from","","Create a parser from the parsing context and token tree we wish to parse.",0,null],[11,"set_err","","Sets a syntax error on the span the parser&#39;s cursor is currently on.",0,null],[11,"set_err_last","","Sets a syntax error on the span **before** the parser&#39;s current token cursor.",0,null],[11,"set_fatal_err","","Sets a fatal error on the parser&#39;s current token, and emits the diagnostic.",0,null],[11,"set_fatal_err_last","","Sets a fatal error on the parser&#39;s previous token, and emits the diagnostic.",0,null],[11,"set_segment_err","","Sets a syntax error on the span representing the current segment.",0,null],[11,"expect_ident_value","","Expects the current token to be an ast::Ident, and that the ident&#39;s name is equal to the given value.",0,null],[11,"expect_semi","","Expect the current token to be a semicolon",0,null],[11,"expect_equal","","Expect the current token to be an equal sign (&#39;=&#39;)",0,null],[11,"expect_fat_arrow","","Expect the current token to be a fat arrow (&#39;=&gt;&#39;)",0,null],[11,"expect_colon","","Expect the current token to be a colon",0,null],[11,"expect_comma","","Expect the current token to be a comma",0,null],[11,"expect_open_paren","","Expect the current token to be an opening paren (&#39;(&#39;))",0,null],[11,"expect_close_paren","","Expect the current token to be a closing paren (&#39;)&#39;)",0,null],[11,"expect_open_curly","","Expect the current token to be an opening curly brace (&#39;{&#39;)",0,null],[11,"expect_close_curly","","Expect the current token to be a closing curly brace (&#39;}&#39;)",0,null],[11,"expect_open_bracket","","Expect the current token to be an opening bracket (&#39;[&#39;)",0,null],[11,"expect_close_bracket","","Expect the current token to be a closing bracket (&#39;]&#39;)",0,null],[11,"get_ident","","Get the parser&#39;s current token as an ast::Ident.",0,null],[11,"get_type_path","","Get the parser&#39;s current token(s) as an ast::Path.",0,null],[11,"get_literal","","Get the parser&#39;s current token as an ast::Lit.",0,null],[11,"parse_uint","","Parse the current token (i.e. literal) as a unsigned integer.",0,null],[11,"checked_parse_uint","","Reads the parser&#39;s current token as an unsigned numeric literal, asserting it fits into T::max_value().",0,null],[11,"parse_constant_literal","","Parses the parser&#39;s current token as a literal, and converts it to our StaticValue type.",0,null],[11,"parse_ident_string","","Parses the current token as an ident, and returns the string value of the identifier.",0,null],[11,"parse_doc_sources","","Parses an entire `doc_srcs =&gt; [ ... ]` block into the given vector",0,null],[11,"parse_constants_block","","Parse an entire `constants =&gt; { ... };` block into the given hash map.",0,null],[0,"ioreg","dynamo","",null,null],[5,"expand_ioreg","dynamo::ioreg","",null,null],[5,"expand_ioreg_debug","","",null,null],[0,"parser","","",null,null],[6,"Parser","dynamo::ioreg::parser","Thin wrapper around the CommonParser so we can add ioreg-specific functions to it.",null,null],[11,"parse_index","","Parses a register offset and index.",5,null],[11,"parse_func_def","","Parses a function definition on a register.",5,null],[11,"parse_reg_width","","Parses the width of a register (i.e. r8, r16, r32) into the internal representation common::RegisterWidth.",5,null],[11,"parse_reg_access","","Parses the access permissions of a register (i.e. ro, rw, wo) into the internal representation common::RegisterPermissions.",5,null],[11,"eat","","Shortcut to self.parser.eat()",5,null],[11,"curr_token","","Shortcut to self.parser.token",5,null],[0,"common","dynamo::ioreg","",null,null],[3,"IoRegOffsetIndexInfo","dynamo::ioreg::common","Represents the offset from the segment, and the index into the register of a register-portion.",null,null],[12,"offset","","",6,null],[12,"width","","",6,null],[12,"span","","",6,null],[3,"IoRegFuncDef","","Internal descriptor for a function definition.",null,null],[12,"name","","",7,null],[12,"values","","",7,null],[12,"ty","","",7,null],[12,"span","","",7,null],[3,"IoRegOffsetInfo","","Internal descriptor for an offset into a Segment.",null,null],[12,"index","","",8,null],[12,"functions","","",8,null],[12,"span","","",8,null],[3,"IoRegSegmentInfo","","Internal representation of a Segment.",null,null],[12,"name","","",9,null],[12,"address","","",9,null],[12,"reg_width","","",9,null],[12,"access_perms","","",9,null],[12,"const_vals","","",9,null],[12,"offsets","","",9,null],[12,"span","","",9,null],[3,"InitInfo","","",null,null],[12,"defined","","",10,null],[12,"item","","",10,null],[12,"span","","",10,null],[3,"IoRegInfo","","Internal representation used to build the ioreg definition.",null,null],[12,"name","","",11,null],[12,"doc_srcs","","",11,null],[12,"segments","","",11,null],[12,"const_vals","","",11,null],[12,"init","","",11,null],[12,"span","","",11,null],[4,"FunctionValueType","","Representation of register function types.",null,null],[13,"Static","","",12,null],[13,"Argument","","",12,null],[13,"Reference","","",12,null],[4,"FunctionType","","Internal representation of function-type classification.",null,null],[13,"Getter","","",13,null],[13,"Setter","","",13,null],[13,"StaticSetter","","",13,null],[4,"RegisterPermissions","","Represents the acces permissions of a register. Guards against writes/reads to registers that do not support it.",null,null],[13,"ReadOnly","","",14,null],[13,"WriteOnly","","",14,null],[13,"ReadWrite","","",14,null],[13,"Unknown","","",14,null],[4,"RegisterWidth","","Represents the width of the register. Curretnly, only supports registers up to 32bits.",null,null],[13,"R8","","",15,null],[13,"R16","","",15,null],[13,"R32","","",15,null],[13,"Unknown","","",15,null],[5,"reg_width_to_ty","","Convert the width of the register to the representative ast::Ty (i.e. R8 -&gt; u8)",null,{"inputs":[{"name":"registerwidth"}],"output":{"name":"p"}}],[5,"offset_width_to_ty","","Converts the offset+index information into the smallest primitive numeric type we can.",null,{"inputs":[{"name":"ioregoffsetindexinfo"}],"output":{"name":"p"}}],[11,"fmt","","",12,null],[11,"clone","","",13,null],[11,"eq","","",13,null],[11,"fmt","","",13,null],[11,"eq","","",14,null],[11,"fmt","","",14,null],[11,"is_entire_register","","",15,null],[11,"as_u8","","",15,null],[11,"to_type_string","","",15,null],[11,"fmt","","",15,null],[11,"fmt","","",6,null],[11,"width_is_byte_aligned","","",6,null],[11,"offset_is_byte_aligned","","",6,null],[11,"is_fully_byte_aligned","","",6,null],[11,"offset_in_bytes","","",6,null],[11,"fmt","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",9,null],[11,"push_offset","","Add an offset to the segment.",9,null],[11,"can_read","","Truthy calue on whether the segment can be read from.",9,null],[11,"can_write","","Truthy calue on whether the segment can be written to.",9,null],[11,"fmt","","",10,null],[11,"fmt","","",11,null],[0,"builder","dynamo::ioreg","",null,null],[3,"Builder","dynamo::ioreg::builder","Builds the AST from the parsed ioreg!() macro.",null,null],[11,"new","","Consumes the parsed IoRegInfo as well as the parser (for later syntax error placement).",16,{"inputs":[{"name":"ioreginfo"},{"name":"parser"},{"name":"bool"}],"output":{"name":"builder"}}],[11,"build","","Outputs Rust AST items representing the generated ioreg.",16,null],[11,"build_read_register","","Builds a `volatile_read()` call that reads the entire mcu-proper-register (internally called an Segment).",16,null],[11,"build_volatile_store_base","","Builds the skeleton of a `volatile_store()` call, with only the destination location set.",16,null],[11,"build_volatile_store","","Builds the `volatile_store(dst, src, len)` statement for a setter.",16,null],[11,"get_uint_const_val","","Reads into the defined constants for this ioreg and returns the numeric literal behind the constant.",16,null],[11,"optimize_write","","Considers the register, offset, and idex to be written to. Then optimizes and reads/writes needed to achieve the action.",16,null],[11,"build_setter","","Generates a setter for a given offset+index.",16,null],[11,"build_setters","","Loops the offset+info blocks for this segment and generates all setters.",16,null],[11,"lookup_const_val","","Gets the StaticValue from the constants defined from this ioreg, with an error if it does not exist.",16,null],[11,"build_peripheral_init_fns","","entry for generating the impl block for the mcu.",16,null],[0,"mcu","dynamo","",null,null],[5,"expand_mcu","dynamo::mcu","",null,null],[5,"expand_mcu_debug","","",null,null],[0,"common","","",null,null],[3,"RangeInfo","dynamo::mcu::common","Structure representing either an index (single number) or a range (1..3).",null,null],[12,"begin","","",17,null],[12,"end","","",17,null],[3,"StackInfo","","Internal structure representing the parsed `stack` block.",null,null],[12,"base","","",18,null],[12,"limit","","",18,null],[12,"span","","",18,null],[3,"DataInfo","","Internal structure representing the parsed `data` block.",null,null],[12,"src_begin","","",19,null],[12,"src_end","","",19,null],[12,"dest","","",19,null],[12,"span","","",19,null],[3,"HeapInfo","","Internal structure representing the parsed `heap` block.",null,null],[12,"base","","",20,null],[12,"limit","","",20,null],[12,"span","","",20,null],[3,"BssInfo","","Internal structure representing the parsed `bss` block.",null,null],[12,"base","","",21,null],[12,"limit","","",21,null],[12,"span","","",21,null],[3,"InterruptsInfo","","Internal structure representing the parsed `interrupts` block.",null,null],[12,"total_ints","","",22,null],[12,"ints","","",22,null],[12,"link_location","","",22,null],[12,"span","","",22,null],[3,"PeripheralInfo","","Internal structure describing a peripheral to be used by the builder to add it to the MCU.",null,null],[12,"name","","",23,null],[12,"path","","",23,null],[12,"ptr","","",23,null],[12,"span","","",23,null],[3,"ActionInfo","","",null,null],[12,"name","","",24,null],[12,"item","","",24,null],[12,"span","","",24,null],[3,"InitInfo","","",null,null],[12,"exit","","",25,null],[12,"span","","",25,null],[3,"NvicInfo","","",null,null],[12,"addr","","",26,null],[12,"prio_bits","","",26,null],[12,"trait_path","","",26,null],[12,"span","","",26,null],[3,"McuInfo","","Internal structure for the builder which describes the parsed MCU block.",null,null],[12,"name","","",27,null],[12,"docs","","",27,null],[12,"constants","","",27,null],[12,"externs","","",27,null],[12,"interrupts","","",27,null],[12,"nvic","","",27,null],[12,"stack","","",27,null],[12,"data","","",27,null],[12,"heap","","",27,null],[12,"bss","","",27,null],[12,"peripherals","","",27,null],[12,"actions","","",27,null],[12,"init","","",27,null],[12,"link_script","","",27,null],[12,"entry_ptr_link","","",27,null],[12,"span","","",27,null],[11,"fmt","","",17,null],[11,"width","","Width of the range. If a single index, this is 0.",17,null],[11,"contains","","Boolean on whether `i` is equal to the index or in the range.",17,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"fmt","","",20,null],[11,"fmt","","",21,null],[11,"fmt","","",22,null],[11,"default","","Generates a basic, nulled, interrupts structure that can be built into.",22,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",23,null],[11,"fmt","","",24,null],[11,"clone","","",24,null],[11,"fmt","","",25,null],[11,"fmt","","",26,null],[11,"fmt","","",27,null],[11,"default","","Returns a basic, nulled, MCU to be parsed into.",27,{"inputs":[],"output":{"name":"self"}}],[0,"builder","dynamo::mcu","",null,null],[3,"Builder","dynamo::mcu::builder","Builds the generated AST from the parsed mcu!() block.",null,null],[11,"new","","Consumes the parsed common::McuInfo descriptor and parser to construct a Builder.",28,{"inputs":[{"name":"mcuinfo"},{"name":"parser"},{"name":"bool"}],"output":{"name":"builder"}}],[11,"build","","Generates the AST from the consumed descriptor block.",28,null],[11,"build_struct","","Builds the MCU structure definition including doc comments, impl functions, etc.",28,null],[11,"build_new_struct","","Generates the structure initializer used in both the ::new() function and to initialize the static version (if generated).",28,null],[11,"build_externs","","Generates the `extern &quot;C&quot; { ... }` block for any defined externs in the expansion.",28,null],[11,"build_mcu_init_fn","","entry for generating the impl block for the mcu.",28,null],[11,"build_impl","","Entry for generating the impl block for the mcu.",28,null],[11,"build_copy_data","","Builds the `::copy_data_section()` function for the MCU definition.",28,null],[11,"build_null_bss","","Builds the `::null_bss()` function for the MCU definition.",28,null],[11,"build_interrupts","","Builds the interrupts table and associates the #[link_section = &quot;.some_location&quot;] attribute with it.",28,null],[11,"build_nvic_ty","","Generates the NVIC type we will add to the generated MCU.",28,null],[11,"build_nvic_instance","","Generates an `ast::Expr` that describes the instantiation of the NVIC.",28,null],[11,"build_nvic_impl","","Generates the functions that will exist on the NVIC handler, but not the NVIC trait.",28,null],[11,"build_nvic_trait_impl","","",28,null],[11,"build_nvic_trait_fns","","Generates the functions that will exist on the NVIC handler.",28,null],[11,"build_init","","Build the init() function that instantiates the mcu.",28,null],[0,"parser","dynamo::mcu","",null,null],[6,"Parser","dynamo::mcu::parser","Extends the ::parser::CommonParser struct to add mcu-specific parsing functions.",null,null],[11,"parse","","Once the parser is created, use this function to consume the entire syntax of the mcu.",29,null],[11,"parse_link_script","","Parses the `link_script =&gt; &quot;some/path/script.ld&quot;;` syntax statement",29,null],[11,"parse_externs_block","","Parses the entire `externs =&gt; { ... };` block.",29,null],[11,"parse_interrupts","","Parses the entire `interrupts =&gt; [num_ints] @ .link_location { ... };` block.",29,null],[11,"parse_nvic","","Parses the NVIC information block, informing us of the address and number of priority bits.",29,null],[11,"parse_memory","","Parses the entire `memory =&gt; { ... };` block.",29,null],[11,"parse_stack","","Parses the entire `stack =&gt; { base =&gt; val @ .link_location; limit =&gt; val; };` block.",29,null],[11,"parse_data","","Parses the entire `data =&gt; { src_begin =&gt; val; src_end =&gt; val; dest =&gt; val };` block.",29,null],[11,"parse_heap","","Parses the entire `heap =&gt; { base =&gt; val; limit =&gt; val; };` block.",29,null],[11,"parse_bss","","Parses the entire `bss =&gt; { base =&gt; val; limit =&gt; val; };` block.",29,null],[11,"parse_peripherals","","Parses the entire `peripherals =&gt; { name =&gt; ty_path @ ptr_loc; ... };` block.",29,null],[11,"parse_actions","","Parses the `actions =&gt; [ ... ];` block where the contents are valid Rust impl items.",29,null],[11,"parse_bootloader_exit","","Parses the init block that generates the `::init()` function.",29,null],[11,"assert_keyword_preamble","","Helper to:\n1. assert keyword\n2. expect fat arrow\n3. expect open curly",29,null],[11,"parse_lit_or_ident","","Parses the current token as either a literal or an ident.",29,null],[11,"parse_index_or_range","","Parses an expression in the form of either:\n    1. `5` i.e. a simple index\n    2. `3..7` i.e. a range",29,null]],"paths":[[3,"CommonParser"],[4,"StaticValue"],[8,"HasMinMax"],[8,"Narrow"],[8,"ToAstType"],[6,"Parser"],[3,"IoRegOffsetIndexInfo"],[3,"IoRegFuncDef"],[3,"IoRegOffsetInfo"],[3,"IoRegSegmentInfo"],[3,"InitInfo"],[3,"IoRegInfo"],[4,"FunctionValueType"],[4,"FunctionType"],[4,"RegisterPermissions"],[4,"RegisterWidth"],[3,"Builder"],[3,"RangeInfo"],[3,"StackInfo"],[3,"DataInfo"],[3,"HeapInfo"],[3,"BssInfo"],[3,"InterruptsInfo"],[3,"PeripheralInfo"],[3,"ActionInfo"],[3,"InitInfo"],[3,"NvicInfo"],[3,"McuInfo"],[3,"Builder"],[6,"Parser"]]};
searchIndex["aster"] = {"doc":"","items":[[3,"AstBuilder","aster","",null,null],[0,"arm","","",null,null],[3,"ArmBuilder","aster::arm","",null,null],[3,"ArmPatBuilder","","",null,null],[3,"ArmBodyBuilder","","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",0,null],[11,"with_attrs","","",0,null],[11,"with_attr","","",0,null],[11,"attr","","",0,null],[11,"with_pats","","",0,null],[11,"with_pat","","",0,null],[11,"pat","","",0,null],[11,"invoke","","",0,null],[11,"invoke","","",0,null],[11,"with_pats","","",1,null],[11,"with_pat","","",1,null],[11,"pat","","",1,null],[11,"with_guard","","",1,null],[11,"guard","","",1,null],[11,"body","","",1,null],[11,"build_arm_","","",1,null],[11,"invoke","","",1,null],[11,"invoke","","",1,null],[11,"body","","",2,null],[11,"build","","",2,null],[11,"invoke","","",2,null],[0,"attr","aster","",null,null],[3,"AttrBuilder","aster::attr","",null,null],[3,"AttrListBuilder","","",null,null],[3,"AttrNameValueBuilder","","",null,null],[11,"new","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",3,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",3,null],[11,"inner","","",3,null],[11,"build_meta_item","","",3,null],[11,"build_meta_item_","","",3,null],[11,"word","","",3,null],[11,"list","","",3,null],[11,"name_value","","",3,null],[11,"automatically_derived","","",3,null],[11,"inline","","",3,null],[11,"test","","",3,null],[11,"allow","","",3,null],[11,"warn","","",3,null],[11,"deny","","",3,null],[11,"features","","",3,null],[11,"plugins","","",3,null],[11,"doc","","Create a #[doc = &quot;...&quot;] node. Note that callers of this must make sure to prefix their\ncomments with either &quot;///&quot; or &quot;/\\*\\*&quot; if an outer comment, or &quot;//!&quot; or &quot;/\\*!&quot; if an inner\ncomment.",3,null],[11,"invoke","","",3,null],[11,"invoke","","",3,null],[11,"with_callback","","",4,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",4,null],[11,"with_meta_items","","",4,null],[11,"with_meta_items_","","",4,null],[11,"with_meta_item","","",4,null],[11,"with_meta_item_kind","","",4,null],[11,"words","","",4,null],[11,"word","","",4,null],[11,"list","","",4,null],[11,"name_value","","",4,null],[11,"build","","",4,null],[11,"invoke","","",4,null],[11,"invoke","","",4,null],[11,"invoke","","",5,null],[0,"block","aster","",null,null],[3,"BlockBuilder","aster::block","",null,null],[11,"new","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",6,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",6,null],[11,"unsafe_","","",6,null],[11,"with_stmts","","",6,null],[11,"with_stmt","","",6,null],[11,"stmt","","",6,null],[11,"build_expr","","",6,null],[11,"expr","","",6,null],[11,"build","","",6,null],[11,"invoke","","",6,null],[11,"invoke","","",6,null],[0,"constant","aster","",null,null],[3,"Const","aster::constant","",null,null],[12,"ty","","",7,null],[12,"expr","","",7,null],[3,"ConstBuilder","","",null,null],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",8,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",8,null],[11,"with_expr","","",8,null],[11,"expr","","",8,null],[11,"ty","","",8,null],[11,"build","","",8,null],[11,"invoke","","",8,null],[11,"invoke","","",8,null],[0,"expr","aster","",null,null],[3,"ExprBuilder","aster::expr","",null,null],[3,"ExprUnaryBuilder","","",null,null],[3,"ExprBinaryLhsBuilder","","",null,null],[3,"ExprBinaryRhsBuilder","","",null,null],[3,"ExprReturnBuilder","","",null,null],[3,"ExprTupleBuilder","","",null,null],[3,"ExprStructBuilder","","",null,null],[3,"ExprStructPathBuilder","","",null,null],[3,"ExprStructFieldBuilder","","",null,null],[3,"ExprCallBuilder","","",null,null],[3,"ExprCallArgsBuilder","","",null,null],[3,"ExprMethodCallBuilder","","",null,null],[3,"ExprMethodCallArgsBuilder","","",null,null],[3,"ExprRefBuilder","","",null,null],[3,"ExprPathBuilder","","",null,null],[3,"ExprAssignBuilder","","",null,null],[3,"ExprAssignLhsBuilder","","",null,null],[3,"ExprAssignOpBuilder","","",null,null],[3,"ExprAssignOpLhsBuilder","","",null,null],[3,"ExprIndexBuilder","","",null,null],[3,"ExprIndexLhsBuilder","","",null,null],[3,"ExprRepeatBuilder","","",null,null],[3,"ExprRepeatLhsBuilder","","",null,null],[3,"ExprLoopBuilder","","",null,null],[3,"ExprIfBuilder","","",null,null],[3,"ExprIfThenBuilder","","",null,null],[3,"ExprIfThenElseBuilder","","",null,null],[3,"ExprElseIfBuilder","","",null,null],[3,"ExprElseIfThenBuilder","","",null,null],[3,"ExprMatchBuilder","","",null,null],[3,"ExprMatchArmBuilder","","",null,null],[3,"ExprParenBuilder","","",null,null],[3,"ExprFieldBuilder","","",null,null],[3,"ExprTupFieldBuilder","","",null,null],[3,"ExprSliceBuilder","","",null,null],[3,"ExprVecBuilder","","",null,null],[3,"ExprTryBuilder","","",null,null],[3,"ExprClosureBuilder","","",null,null],[3,"ExprClosureBlockBuilder","","",null,null],[3,"ExprWhileBuilder","","",null,null],[3,"ExprWhileBlockBuilder","","",null,null],[3,"ExprTypeBuilder","","",null,null],[3,"ExprTypeTyBuilder","","",null,null],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",9,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",9,null],[11,"span","","",9,null],[11,"with_attr","","",9,null],[11,"attr","","",9,null],[11,"build_expr_kind","","",9,null],[11,"build_path","","",9,null],[11,"build_qpath","","",9,null],[11,"path","","",9,null],[11,"qpath","","",9,null],[11,"id","","",9,null],[11,"build_lit","","",9,null],[11,"lit","","",9,null],[11,"bool","","",9,null],[11,"true_","","",9,null],[11,"false_","","",9,null],[11,"int","","",9,null],[11,"uint","","",9,null],[11,"isize","","",9,null],[11,"i8","","",9,null],[11,"i16","","",9,null],[11,"i32","","",9,null],[11,"i64","","",9,null],[11,"usize","","",9,null],[11,"u8","","",9,null],[11,"u16","","",9,null],[11,"u32","","",9,null],[11,"u64","","",9,null],[11,"f32","","",9,null],[11,"f64","","",9,null],[11,"str","","",9,null],[11,"build_unary","","",9,null],[11,"build_deref","","",9,null],[11,"build_not","","",9,null],[11,"build_neg","","",9,null],[11,"unary","","",9,null],[11,"deref","","",9,null],[11,"not","","",9,null],[11,"neg","","",9,null],[11,"build_binary","","",9,null],[11,"build_add","","",9,null],[11,"build_sub","","",9,null],[11,"build_mul","","",9,null],[11,"build_div","","",9,null],[11,"build_rem","","",9,null],[11,"build_and","","",9,null],[11,"build_or","","",9,null],[11,"build_bit_xor","","",9,null],[11,"build_bit_and","","",9,null],[11,"build_bit_or","","",9,null],[11,"build_shl","","",9,null],[11,"build_shr","","",9,null],[11,"build_eq","","",9,null],[11,"build_lt","","",9,null],[11,"build_le","","",9,null],[11,"build_ne","","",9,null],[11,"build_ge","","",9,null],[11,"build_gt","","",9,null],[11,"binary","","",9,null],[11,"add","","",9,null],[11,"sub","","",9,null],[11,"mul","","",9,null],[11,"div","","",9,null],[11,"rem","","",9,null],[11,"and","","",9,null],[11,"or","","",9,null],[11,"bit_xor","","",9,null],[11,"bit_and","","",9,null],[11,"bit_or","","",9,null],[11,"shl","","",9,null],[11,"shr","","",9,null],[11,"eq","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"ne","","",9,null],[11,"ge","","",9,null],[11,"gt","","",9,null],[11,"ref_","","",9,null],[11,"mut_ref","","",9,null],[11,"break_","","",9,null],[11,"break_to","","",9,null],[11,"continue_","","",9,null],[11,"continue_to","","",9,null],[11,"return_","","",9,null],[11,"return_expr","","",9,null],[11,"unit","","",9,null],[11,"tuple","","",9,null],[11,"struct_path","","",9,null],[11,"struct_id","","",9,null],[11,"struct_","","",9,null],[11,"self_","","",9,null],[11,"none","","",9,null],[11,"some","","",9,null],[11,"ok","","",9,null],[11,"err","","",9,null],[11,"phantom_data","","",9,null],[11,"call","","",9,null],[11,"method_call","","",9,null],[11,"build_block","","",9,null],[11,"block","","",9,null],[11,"build_assign","","",9,null],[11,"assign","","",9,null],[11,"build_assign_op","","",9,null],[11,"assign_op","","",9,null],[11,"add_assign","","",9,null],[11,"sub_assign","","",9,null],[11,"mul_assign","","",9,null],[11,"rem_assign","","",9,null],[11,"and_assign","","",9,null],[11,"or_assign","","",9,null],[11,"bit_xor_assign","","",9,null],[11,"bit_and_assign","","",9,null],[11,"bit_or_assign","","",9,null],[11,"bit_shl_assign","","",9,null],[11,"bit_shr_assign","","",9,null],[11,"build_index","","",9,null],[11,"index","","",9,null],[11,"build_repeat","","",9,null],[11,"repeat","","",9,null],[11,"loop_","","",9,null],[11,"if_","","",9,null],[11,"match_","","",9,null],[11,"paren","","",9,null],[11,"field","","",9,null],[11,"tup_field","","",9,null],[11,"box_","","",9,null],[11,"rc","","",9,null],[11,"arc","","",9,null],[11,"default","","",9,null],[11,"slice","","",9,null],[11,"vec","","",9,null],[11,"try","","Represents an equivalent to `try!(...)`.",9,null],[11,"closure","","",9,null],[11,"while_","","",9,null],[11,"type_","","",9,null],[11,"invoke","","",9,null],[11,"invoke","","",9,null],[11,"invoke","","",9,null],[11,"invoke","","",9,null],[11,"invoke","","",9,null],[11,"invoke","","",10,null],[11,"invoke","","",11,null],[11,"invoke","","",12,null],[11,"invoke","","",13,null],[11,"with_exprs","","",14,null],[11,"expr","","",14,null],[11,"build","","",14,null],[11,"invoke","","",14,null],[11,"invoke","","",15,null],[11,"span","","",16,null],[11,"with_fields","","",16,null],[11,"with_id_exprs","","",16,null],[11,"field","","",16,null],[11,"build_with","","",16,null],[11,"build","","",16,null],[11,"invoke","","",16,null],[11,"invoke","","",17,null],[11,"invoke","","",18,null],[11,"with_args","","",19,null],[11,"with_arg","","",19,null],[11,"arg","","",19,null],[11,"build","","",19,null],[11,"invoke","","",19,null],[11,"invoke","","",20,null],[11,"with_tys","","",21,null],[11,"with_ty","","",21,null],[11,"ty","","",21,null],[11,"with_args","","",21,null],[11,"with_arg","","",21,null],[11,"arg","","",21,null],[11,"build","","",21,null],[11,"invoke","","",21,null],[11,"invoke","","",21,null],[11,"invoke","","",22,null],[11,"invoke","","",23,null],[11,"invoke","","",24,null],[11,"invoke","","",25,null],[11,"invoke","","",26,null],[11,"invoke","","",27,null],[11,"invoke","","",28,null],[11,"invoke","","",29,null],[11,"invoke","","",30,null],[11,"invoke","","",31,null],[11,"span","","",32,null],[11,"label","","",32,null],[11,"block","","",32,null],[11,"invoke","","",32,null],[11,"invoke","","",33,null],[11,"build_then","","",34,null],[11,"then","","",34,null],[11,"invoke","","",34,null],[11,"else_if","","",35,null],[11,"build_else","","",35,null],[11,"else_","","",35,null],[11,"build","","",35,null],[11,"invoke","","",35,null],[11,"invoke","","",36,null],[11,"build_then","","",37,null],[11,"then","","",37,null],[11,"invoke","","",37,null],[11,"invoke","","",38,null],[11,"with_arms","","",39,null],[11,"with_arm","","",39,null],[11,"arm","","",39,null],[11,"build","","",39,null],[11,"invoke","","",39,null],[11,"invoke","","",40,null],[11,"invoke","","",41,null],[11,"invoke","","",42,null],[11,"with_exprs","","",43,null],[11,"expr","","",43,null],[11,"build","","",43,null],[11,"invoke","","",43,null],[11,"invoke","","",44,null],[11,"invoke","","",45,null],[11,"span","","",46,null],[11,"by_value","","",46,null],[11,"by_ref","","",46,null],[11,"fn_decl","","",46,null],[11,"build_fn_decl","","",46,null],[11,"invoke","","",46,null],[11,"expr","","",47,null],[11,"block","","",47,null],[11,"build_block","","",47,null],[11,"invoke","","",47,null],[11,"invoke","","",48,null],[11,"pat","","",49,null],[11,"span","","",49,null],[11,"label","","",49,null],[11,"build_pat","","",49,null],[11,"block","","",49,null],[11,"build_block","","",49,null],[11,"invoke","","",49,null],[11,"invoke","","",49,null],[11,"invoke","","",50,null],[11,"invoke","","",51,null],[0,"fn_decl","aster","",null,null],[3,"FnDeclBuilder","aster::fn_decl","",null,null],[3,"ArgBuilder","","",null,null],[3,"ArgPatBuilder","","",null,null],[11,"new","","",52,{"inputs":[],"output":{"name":"fndeclbuilder"}}],[11,"with_callback","","",52,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",52,null],[11,"variadic","","",52,null],[11,"with_self","","",52,null],[11,"self_","","",52,null],[11,"with_arg","","",52,null],[11,"with_args","","",52,null],[11,"arg","","",52,null],[11,"arg_id","","",52,null],[11,"arg_ref_id","","",52,null],[11,"arg_mut_id","","",52,null],[11,"arg_ref_mut_id","","",52,null],[11,"no_return","","",52,null],[11,"default_return","","",52,null],[11,"build_return","","",52,null],[11,"return_","","",52,null],[11,"build","","",52,null],[11,"invoke","","",52,null],[11,"invoke","","",52,null],[11,"invoke","","",52,null],[11,"new","","",53,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",53,{"inputs":[{"name":"f"}],"output":{"name":"argbuilder"}}],[11,"span","","",53,null],[11,"with_pat","","",53,null],[11,"pat","","",53,null],[11,"id","","",53,null],[11,"ref_id","","",53,null],[11,"mut_id","","",53,null],[11,"ref_mut_id","","",53,null],[11,"invoke","","",53,null],[11,"with_ty","","",54,null],[11,"ty","","",54,null],[11,"invoke","","",54,null],[0,"generics","aster","",null,null],[3,"GenericsBuilder","aster::generics","",null,null],[11,"new","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"from_generics","","",55,{"inputs":[{"name":"generics"}],"output":{"name":"self"}}],[11,"with_callback","","",55,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"from_generics_with_callback","","",55,{"inputs":[{"name":"generics"},{"name":"f"}],"output":{"name":"self"}}],[11,"with","","",55,null],[11,"span","","",55,null],[11,"with_lifetimes","","",55,null],[11,"with_lifetime_names","","",55,null],[11,"with_lifetime","","",55,null],[11,"lifetime_name","","",55,null],[11,"lifetime","","",55,null],[11,"with_ty_params","","",55,null],[11,"with_ty_param_ids","","",55,null],[11,"with_ty_param","","",55,null],[11,"ty_param_id","","",55,null],[11,"ty_param","","",55,null],[11,"with_predicates","","",55,null],[11,"with_predicate","","",55,null],[11,"predicate","","",55,null],[11,"add_lifetime_bound","","",55,null],[11,"add_ty_param_bound","","",55,null],[11,"strip_bounds","","",55,null],[11,"strip_lifetimes","","",55,null],[11,"strip_ty_params","","",55,null],[11,"strip_predicates","","",55,null],[11,"build","","",55,null],[11,"invoke","","",55,null],[11,"invoke","","",55,null],[11,"invoke","","",55,null],[0,"ident","aster","",null,null],[8,"ToIdent","aster::ident","",null,null],[10,"to_ident","","",56,null],[0,"invoke","aster","",null,null],[3,"Identity","aster::invoke","",null,null],[8,"Invoke","","",null,null],[16,"Result","","",57,null],[10,"invoke","","",57,null],[11,"clone","","",58,null],[11,"invoke","","",58,null],[0,"item","aster","",null,null],[3,"ItemBuilder","aster::item","",null,null],[3,"ItemFnDeclBuilder","","",null,null],[3,"ItemFnBuilder","","",null,null],[3,"ItemUseBuilder","","",null,null],[3,"ItemUsePathBuilder","","",null,null],[3,"ItemUsePathListBuilder","","",null,null],[3,"ItemStructBuilder","","",null,null],[3,"ItemTupleStructBuilder","","",null,null],[3,"ItemEnumBuilder","","",null,null],[3,"ItemExternCrateBuilder","","A builder for extern crate items",null,null],[3,"ItemMacBuilder","","A builder for macro invocation items.",null,null],[3,"ItemTyBuilder","","",null,null],[3,"ItemTraitBuilder","","",null,null],[3,"ItemTraitItemBuilder","","",null,null],[3,"ItemTraitMethodBuilder","","",null,null],[3,"ItemTraitTypeBuilder","","",null,null],[3,"ItemImplBuilder","","",null,null],[3,"ItemImplItemBuilder","","",null,null],[3,"ItemImplMethodBuilder","","",null,null],[3,"ItemConstBuilder","","",null,null],[11,"new","","",59,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",59,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",59,null],[11,"span","","",59,null],[11,"with_attrs","","",59,null],[11,"with_attr","","",59,null],[11,"attr","","",59,null],[11,"pub_","","",59,null],[11,"build_item_kind","","",59,null],[11,"fn_","","",59,null],[11,"build_use","","",59,null],[11,"use_","","",59,null],[11,"struct_","","",59,null],[11,"unit_struct","","",59,null],[11,"tuple_struct","","",59,null],[11,"enum_","","",59,null],[11,"extern_crate","","",59,null],[11,"mac","","",59,null],[11,"type_","","",59,null],[11,"trait_","","",59,null],[11,"impl_","","",59,null],[11,"const_","","",59,null],[11,"invoke","","",59,null],[11,"invoke","","",60,null],[11,"unsafe_","","",61,null],[11,"const_","","",61,null],[11,"abi","","",61,null],[11,"generics","","",61,null],[11,"build","","",61,null],[11,"block","","",61,null],[11,"invoke","","",61,null],[11,"invoke","","",61,null],[11,"invoke","","",62,null],[11,"as_","","",63,null],[11,"build","","",63,null],[11,"glob","","",63,null],[11,"list","","",63,null],[11,"span","","",64,null],[11,"self_","","",64,null],[11,"id","","",64,null],[11,"build","","",64,null],[11,"with_generics","","",65,null],[11,"generics","","",65,null],[11,"with_fields","","",65,null],[11,"with_field","","",65,null],[11,"field","","",65,null],[11,"build","","",65,null],[11,"invoke","","",65,null],[11,"invoke","","",65,null],[11,"generics","","",66,null],[11,"with_tys","","",66,null],[11,"ty","","",66,null],[11,"field","","",66,null],[11,"build","","",66,null],[11,"invoke","","",66,null],[11,"invoke","","",66,null],[11,"invoke","","",66,null],[11,"generics","","",67,null],[11,"with_variants","","",67,null],[11,"with_variant","","",67,null],[11,"with_variant_","","",67,null],[11,"ids","","",67,null],[11,"id","","",67,null],[11,"tuple","","",67,null],[11,"struct_","","",67,null],[11,"variant","","",67,null],[11,"build","","",67,null],[11,"invoke","","",67,null],[11,"invoke","","",67,null],[11,"with_name","","",68,null],[11,"build","","",68,null],[11,"path","","",69,null],[11,"build","","",69,null],[11,"invoke","","",69,null],[11,"invoke","","",69,null],[11,"generics","","",70,null],[11,"ty","","",70,null],[11,"build_ty","","",70,null],[11,"invoke","","",70,null],[11,"invoke","","",70,null],[11,"unsafe_","","",71,null],[11,"with_generics","","",71,null],[11,"generics","","",71,null],[11,"with_bounds","","",71,null],[11,"with_bound","","",71,null],[11,"bound","","",71,null],[11,"with_items","","",71,null],[11,"with_item","","",71,null],[11,"item","","",71,null],[11,"const_","","",71,null],[11,"method","","",71,null],[11,"type_","","",71,null],[11,"build","","",71,null],[11,"invoke","","",71,null],[11,"invoke","","",71,null],[11,"invoke","","",71,null],[11,"new","","",72,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"with_callback","","",72,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",72,null],[11,"with_attrs","","",72,null],[11,"with_attr","","",72,null],[11,"attr","","",72,null],[11,"const_","","",72,null],[11,"method","","",72,null],[11,"type_","","",72,null],[11,"build_item","","",72,null],[11,"invoke","","",72,null],[11,"invoke","","",72,null],[11,"invoke","","",72,null],[11,"build_option_block","","",73,null],[11,"build_block","","",73,null],[11,"build","","",73,null],[11,"invoke","","",73,null],[11,"with_bounds","","",74,null],[11,"with_bound","","",74,null],[11,"bound","","",74,null],[11,"build_option_ty","","",74,null],[11,"build_ty","","",74,null],[11,"ty","","",74,null],[11,"build","","",74,null],[11,"invoke","","",74,null],[11,"invoke","","",74,null],[11,"unsafe_","","",75,null],[11,"negative","","",75,null],[11,"with_generics","","",75,null],[11,"generics","","",75,null],[11,"with_trait","","",75,null],[11,"trait_","","",75,null],[11,"ty","","",75,null],[11,"build_ty","","",75,null],[11,"with_items","","",75,null],[11,"with_item","","",75,null],[11,"item","","",75,null],[11,"const_","","",75,null],[11,"method","","",75,null],[11,"type_","","",75,null],[11,"invoke","","",75,null],[11,"invoke","","",75,null],[11,"invoke","","",75,null],[11,"invoke","","",75,null],[11,"new","","",76,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"with_callback","","",76,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",76,null],[11,"with_attrs","","",76,null],[11,"with_attr","","",76,null],[11,"attr","","",76,null],[11,"pub_","","",76,null],[11,"default","","",76,null],[11,"const_","","",76,null],[11,"build_method","","",76,null],[11,"method","","",76,null],[11,"type_","","",76,null],[11,"mac","","",76,null],[11,"build_item","","",76,null],[11,"invoke","","",76,null],[11,"invoke","","",76,null],[11,"invoke","","",76,null],[11,"invoke","","",76,null],[11,"invoke","","",76,null],[11,"build_block","","",77,null],[11,"block","","",77,null],[11,"invoke","","",77,null],[11,"invoke","","",78,null],[0,"lifetime","aster","",null,null],[3,"LifetimeDefBuilder","aster::lifetime","",null,null],[8,"IntoLifetime","","",null,null],[10,"into_lifetime","","",79,null],[8,"IntoLifetimeDef","","",null,null],[10,"into_lifetime_def","","",80,null],[11,"new","","",81,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"with_callback","","",81,{"inputs":[{"name":"n"},{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",81,null],[11,"build","","",81,null],[0,"lit","aster","",null,null],[3,"LitBuilder","aster::lit","",null,null],[11,"new","","",82,{"inputs":[],"output":{"name":"litbuilder"}}],[11,"with_callback","","",82,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",82,null],[11,"build_lit","","",82,null],[11,"bool","","",82,null],[11,"true_","","",82,null],[11,"false_","","",82,null],[11,"int","","",82,null],[11,"isize","","",82,null],[11,"i8","","",82,null],[11,"i16","","",82,null],[11,"i32","","",82,null],[11,"i64","","",82,null],[11,"uint","","",82,null],[11,"usize","","",82,null],[11,"u8","","",82,null],[11,"u16","","",82,null],[11,"u32","","",82,null],[11,"u64","","",82,null],[11,"f32","","",82,null],[11,"f64","","",82,null],[11,"char","","",82,null],[11,"byte","","",82,null],[11,"str","","",82,null],[11,"byte_str","","",82,null],[0,"mac","aster","",null,null],[3,"MacBuilder","aster::mac","A Builder for macro invocations.",null,null],[11,"new","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",83,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",83,null],[11,"path","","",83,null],[11,"build","","",83,null],[11,"with_args","","",83,null],[11,"with_arg","","",83,null],[11,"expr","","",83,null],[11,"invoke","","",83,null],[0,"method","aster","",null,null],[3,"MethodSigBuilder","aster::method","",null,null],[11,"new","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",84,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",84,null],[11,"unsafe_","","",84,null],[11,"const_","","",84,null],[11,"abi","","",84,null],[11,"with_generics","","",84,null],[11,"generics","","",84,null],[11,"build_fn_decl","","",84,null],[11,"fn_decl","","",84,null],[11,"invoke","","",84,null],[11,"invoke","","",84,null],[0,"name","aster","",null,null],[8,"ToName","aster::name","",null,null],[10,"to_name","","",85,null],[0,"pat","aster","",null,null],[3,"PatBuilder","aster::pat","",null,null],[3,"PatRangeBuilder","","",null,null],[3,"PatRangeExprBuilder","","",null,null],[3,"PatEnumBuilder","","",null,null],[3,"PatEnumPathBuilder","","",null,null],[3,"PatStructBuilder","","",null,null],[3,"PatStructPathBuilder","","",null,null],[3,"PatStructFieldBuilder","","",null,null],[3,"PatExprBuilder","","",null,null],[3,"PatTupleBuilder","","",null,null],[3,"PatRefBuilder","","",null,null],[11,"new","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",86,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",86,null],[11,"build","","",86,null],[11,"build_pat_kind","","",86,null],[11,"wild","","",86,null],[11,"build_id","","",86,null],[11,"id","","",86,null],[11,"mut_id","","",86,null],[11,"ref_id","","",86,null],[11,"ref_mut_id","","",86,null],[11,"enum_","","",86,null],[11,"struct_","","",86,null],[11,"expr","","",86,null],[11,"build_path","","",86,null],[11,"build_qpath","","",86,null],[11,"path","","",86,null],[11,"qpath","","",86,null],[11,"build_range","","",86,null],[11,"range","","",86,null],[11,"tuple","","",86,null],[11,"ref_","","",86,null],[11,"ref_mut","","",86,null],[11,"invoke","","",86,null],[11,"invoke","","",86,null],[11,"invoke","","",87,null],[11,"invoke","","",88,null],[11,"invoke","","",89,null],[11,"with_pats","","",90,null],[11,"pat","","",90,null],[11,"with_ids","","",90,null],[11,"id","","",90,null],[11,"wild","","",90,null],[11,"build","","",90,null],[11,"invoke","","",90,null],[11,"invoke","","",91,null],[11,"with_field_pat","","",92,null],[11,"with_pats","","",92,null],[11,"pat","","",92,null],[11,"with_ids","","",92,null],[11,"mut_id","","",92,null],[11,"id","","",92,null],[11,"etc","","",92,null],[11,"build","","",92,null],[11,"invoke","","",93,null],[11,"invoke","","",94,null],[11,"with_pats","","",95,null],[11,"with_pat","","",95,null],[11,"pat","","",95,null],[11,"wild","","",95,null],[11,"build","","",95,null],[11,"invoke","","",95,null],[11,"invoke","","",96,null],[0,"path","aster","",null,null],[3,"PathBuilder","aster::path","",null,null],[3,"PathSegmentsBuilder","","",null,null],[3,"PathSegmentBuilder","","",null,null],[3,"TypeBindingBuilder","","",null,null],[3,"PathSegmentReturnBuilder","","",null,null],[8,"IntoPath","","",null,null],[10,"into_path","","",97,null],[11,"new","","",98,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",98,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",98,null],[11,"span","","Update the span to start from this location.",98,null],[11,"global","","",98,null],[11,"ids","","",98,null],[11,"id","","",98,null],[11,"segment","","",98,null],[11,"ids","","",99,null],[11,"id","","",99,null],[11,"segment","","",99,null],[11,"build","","",99,null],[11,"invoke","","",99,null],[11,"with_callback","","",100,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",100,null],[11,"with_generics","","",100,null],[11,"with_lifetimes","","",100,null],[11,"with_lifetime","","",100,null],[11,"lifetime","","",100,null],[11,"with_tys","","",100,null],[11,"with_ty","","",100,null],[11,"ty","","",100,null],[11,"with_binding","","",100,null],[11,"binding","","",100,null],[11,"no_return","","",100,null],[11,"return_","","",100,null],[11,"build_return","","",100,null],[11,"build","","",100,null],[11,"invoke","","",100,null],[11,"invoke","","",101,null],[11,"invoke","","",102,null],[0,"qpath","aster","",null,null],[3,"QPathBuilder","aster::qpath","",null,null],[3,"QPathTyBuilder","","",null,null],[3,"QPathQSelfBuilder","","",null,null],[11,"new","","",103,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","Construct a `QPathBuilder` that will call the `callback` with a constructed `ast::QSelf`\nand `ast::Path`.",103,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","Update the span to start from this location.",103,null],[11,"with_ty","","Build a qualified path first by starting with a type builder.",103,null],[11,"ty","","Build a qualified path first by starting with a type builder.",103,null],[11,"build","","Build a qualified path with a concrete type and path.",103,null],[11,"invoke","","",103,null],[11,"as_","","Build a qualified path with a path builder.",104,null],[11,"id","","",104,null],[11,"segment","","",104,null],[11,"invoke","","",104,null],[11,"id","","",105,null],[11,"segment","","",105,null],[11,"invoke","","",105,null],[0,"self_","aster","",null,null],[3,"SelfBuilder","aster::self_","",null,null],[11,"new","","",106,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",106,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",106,null],[11,"span","","",106,null],[11,"mut_","","",106,null],[11,"value","","",106,null],[11,"ref_","","",106,null],[11,"ref_lifetime","","",106,null],[11,"ty","","",106,null],[11,"invoke","","",106,null],[0,"stmt","aster","",null,null],[3,"StmtBuilder","aster::stmt","",null,null],[3,"StmtLetIdBuilder","","",null,null],[3,"StmtExprBuilder","","",null,null],[3,"StmtSemiBuilder","","",null,null],[3,"StmtLetBuilder","","",null,null],[3,"StmtLetTyBuilder","","",null,null],[3,"StmtItemBuilder","","",null,null],[11,"new","","",107,{"inputs":[],"output":{"name":"stmtbuilder"}}],[11,"with_callback","","",107,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",107,null],[11,"span","","",107,null],[11,"build_stmt_kind","","",107,null],[11,"build_let","","",107,null],[11,"let_","","",107,null],[11,"let_id","","",107,null],[11,"build_expr","","",107,null],[11,"expr","","",107,null],[11,"semi","","",107,null],[11,"build_item","","",107,null],[11,"item","","",107,null],[11,"invoke","","",107,null],[11,"invoke","","",108,null],[11,"invoke","","",109,null],[11,"invoke","","",110,null],[11,"ty","","",111,null],[11,"build_expr","","",111,null],[11,"expr","","",111,null],[11,"build","","",111,null],[11,"invoke","","",111,null],[11,"invoke","","",111,null],[11,"expr","","",112,null],[11,"build","","",112,null],[11,"invoke","","",112,null],[11,"invoke","","",113,null],[0,"str","aster","",null,null],[8,"ToInternedString","aster::str","",null,null],[10,"to_interned_string","","",114,null],[0,"struct_field","aster","",null,null],[3,"StructFieldBuilder","aster::struct_field","",null,null],[11,"named","","",115,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unnamed","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"named_with_callback","","",115,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"unnamed_with_callback","","",115,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",115,null],[11,"pub_","","",115,null],[11,"with_attrs","","",115,null],[11,"attr","","",115,null],[11,"build_ty","","",115,null],[11,"ty","","",115,null],[11,"invoke","","",115,null],[11,"invoke","","",115,null],[0,"ty","aster","",null,null],[3,"TyBuilder","aster::ty","",null,null],[3,"TyPathBuilder","","",null,null],[3,"TyQPathBuilder","","",null,null],[3,"TySliceBuilder","","",null,null],[3,"TyRefBuilder","","",null,null],[3,"TyOptionBuilder","","",null,null],[3,"TyResultOkBuilder","","",null,null],[3,"TyResultErrBuilder","","",null,null],[3,"TyPhantomDataBuilder","","",null,null],[3,"TyBoxBuilder","","",null,null],[3,"TyIteratorBuilder","","",null,null],[3,"TyObjectSumBuilder","","",null,null],[3,"TyObjectSumTyBuilder","","",null,null],[3,"TyImplTraitTyBuilder","","",null,null],[3,"TyTupleBuilder","","",null,null],[11,"new","","",116,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",116,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",116,null],[11,"span","","",116,null],[11,"build_ty_kind","","",116,null],[11,"id","","",116,null],[11,"build_path","","",116,null],[11,"build_qpath","","",116,null],[11,"path","","",116,null],[11,"qpath","","",116,null],[11,"isize","","",116,null],[11,"i8","","",116,null],[11,"i16","","",116,null],[11,"i32","","",116,null],[11,"i64","","",116,null],[11,"usize","","",116,null],[11,"u8","","",116,null],[11,"u16","","",116,null],[11,"u32","","",116,null],[11,"u64","","",116,null],[11,"f32","","",116,null],[11,"f64","","",116,null],[11,"bool","","",116,null],[11,"unit","","",116,null],[11,"tuple","","",116,null],[11,"build_slice","","",116,null],[11,"slice","","",116,null],[11,"ref_","","",116,null],[11,"never","","",116,null],[11,"infer","","",116,null],[11,"option","","",116,null],[11,"result","","",116,null],[11,"phantom_data","","",116,null],[11,"box_","","",116,null],[11,"iterator","","",116,null],[11,"object_sum","","",116,null],[11,"impl_trait","","",116,null],[11,"invoke","","",117,null],[11,"invoke","","",118,null],[11,"invoke","","",119,null],[11,"mut_","","",120,null],[11,"lifetime","","",120,null],[11,"build_ty","","",120,null],[11,"ty","","",120,null],[11,"invoke","","",120,null],[11,"invoke","","",121,null],[11,"invoke","","",122,null],[11,"invoke","","",123,null],[11,"invoke","","",124,null],[11,"invoke","","",125,null],[11,"invoke","","",126,null],[11,"invoke","","",127,null],[11,"with_bounds","","",128,null],[11,"with_bound","","",128,null],[11,"bound","","",128,null],[11,"with_generics","","",128,null],[11,"with_lifetimes","","",128,null],[11,"lifetime","","",128,null],[11,"build","","",128,null],[11,"invoke","","",128,null],[11,"with_bounds","","",129,null],[11,"with_bound","","",129,null],[11,"bound","","",129,null],[11,"with_generics","","",129,null],[11,"with_lifetimes","","",129,null],[11,"lifetime","","",129,null],[11,"build","","",129,null],[11,"invoke","","",129,null],[11,"with_tys","","",130,null],[11,"with_ty","","",130,null],[11,"ty","","",130,null],[11,"build","","",130,null],[11,"invoke","","",130,null],[0,"ty_param","aster","",null,null],[3,"TyParamBuilder","aster::ty_param","",null,null],[3,"TyParamBoundBuilder","","",null,null],[3,"TraitTyParamBoundBuilder","","",null,null],[3,"PolyTraitRefBuilder","","",null,null],[11,"new","","",131,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_ty_param","","",131,{"inputs":[{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_callback","","",131,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_ty_param_with_callback","","",131,{"inputs":[{"name":"f"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"span","","",131,null],[11,"with_default","","",131,null],[11,"default","","",131,null],[11,"with_bound","","",131,null],[11,"bound","","",131,null],[11,"with_trait_bound","","",131,null],[11,"trait_bound","","",131,null],[11,"lifetime_bound","","",131,null],[11,"build","","",131,null],[11,"invoke","","",131,null],[11,"invoke","","",131,null],[11,"invoke","","",131,null],[11,"new","","",132,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",132,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",132,null],[11,"build_trait","","",132,null],[11,"trait_","","",132,null],[11,"maybe_trait","","",132,null],[11,"iterator","","",132,null],[11,"lifetime","","",132,null],[11,"invoke","","",133,null],[11,"with_callback","","",134,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",134,null],[11,"with_lifetime","","",134,null],[11,"lifetime","","",134,null],[11,"build","","",134,null],[11,"invoke","","",134,null],[0,"variant","aster","",null,null],[3,"VariantBuilder","aster::variant","",null,null],[11,"new","","",135,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"with_callback","","",135,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",135,null],[11,"attr","","",135,null],[11,"unit","","",135,null],[11,"tuple","","",135,null],[11,"struct_","","",135,null],[11,"build_variant_data","","",135,null],[11,"build_variant_","","",135,null],[11,"build","","",135,null],[11,"invoke","","",135,null],[11,"invoke","","",135,null],[0,"variant_data","aster","",null,null],[3,"VariantDataBuilder","aster::variant_data","",null,null],[3,"VariantDataTupleBuilder","","",null,null],[3,"VariantDataStructBuilder","","",null,null],[11,"new","","",136,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",136,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",136,null],[11,"tuple","","",136,null],[11,"struct_","","",136,null],[11,"unit","","",136,null],[11,"with_fields","","",137,null],[11,"with_field","","",137,null],[11,"field","","",137,null],[11,"with_ty","","",137,null],[11,"ty","","",137,null],[11,"build","","",137,null],[11,"invoke","","",137,null],[11,"invoke","","",137,null],[11,"with_fields","","",138,null],[11,"with_field","","",138,null],[11,"field","","",138,null],[11,"build","","",138,null],[11,"invoke","","",138,null],[0,"where_predicate","aster","",null,null],[3,"WherePredicateBuilder","aster::where_predicate","",null,null],[3,"WhereBoundPredicateBuilder","","",null,null],[3,"WhereBoundPredicateTyBuilder","","",null,null],[3,"WhereBoundPredicateTyBoundsBuilder","","",null,null],[3,"WhereRegionPredicateBuilder","","",null,null],[3,"WhereEqPredicateBuilder","","",null,null],[11,"new","","",139,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",139,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",139,null],[11,"bound","","",139,null],[11,"lifetime","","",139,null],[11,"eq","","",139,null],[11,"invoke","","",139,null],[11,"invoke","","",140,null],[11,"with_for_lifetime","","",141,null],[11,"for_lifetime","","",141,null],[11,"with_bound","","",141,null],[11,"bound","","",141,null],[11,"trait_","","",141,null],[11,"lifetime","","",141,null],[11,"invoke","","",141,null],[11,"invoke","","",141,null],[11,"with_for_lifetime","","",142,null],[11,"for_lifetime","","",142,null],[11,"with_bound","","",142,null],[11,"bound","","",142,null],[11,"trait_","","",142,null],[11,"lifetime","","",142,null],[11,"build","","",142,null],[11,"invoke","","",142,null],[11,"invoke","","",142,null],[11,"bound","","",143,null],[11,"build","","",143,null],[11,"ty","","",144,null],[11,"build_ty","","",144,null],[11,"invoke","","",144,null],[11,"clone","aster","",145,null],[11,"new","","",145,{"inputs":[],"output":{"name":"astbuilder"}}],[11,"span","","",145,null],[11,"interned_string","","",145,null],[11,"id","","",145,null],[11,"name","","",145,null],[11,"lifetime","","",145,null],[11,"arm","","",145,null],[11,"attr","","",145,null],[11,"path","","",145,null],[11,"qpath","","",145,null],[11,"ty","","",145,null],[11,"lifetime_def","","",145,null],[11,"ty_param","","",145,null],[11,"ty_param_bound","","",145,null],[11,"from_ty_param","","",145,null],[11,"generics","","",145,null],[11,"where_predicate","","",145,null],[11,"from_generics","","",145,null],[11,"lit","","",145,null],[11,"expr","","",145,null],[11,"stmt","","",145,null],[11,"block","","",145,null],[11,"pat","","",145,null],[11,"fn_decl","","",145,null],[11,"method_sig","","",145,null],[11,"self_","","",145,null],[11,"arg","","",145,null],[11,"variant_data","","",145,null],[11,"variant","","",145,null],[11,"struct_field","","",145,null],[11,"tuple_field","","",145,null],[11,"item","","",145,null],[11,"trait_item","","",145,null],[11,"impl_item","","",145,null],[11,"const_","","",145,null],[11,"default","","",145,{"inputs":[],"output":{"name":"self"}}]],"paths":[[3,"ArmBuilder"],[3,"ArmPatBuilder"],[3,"ArmBodyBuilder"],[3,"AttrBuilder"],[3,"AttrListBuilder"],[3,"AttrNameValueBuilder"],[3,"BlockBuilder"],[3,"Const"],[3,"ConstBuilder"],[3,"ExprBuilder"],[3,"ExprUnaryBuilder"],[3,"ExprBinaryLhsBuilder"],[3,"ExprBinaryRhsBuilder"],[3,"ExprReturnBuilder"],[3,"ExprTupleBuilder"],[3,"ExprStructBuilder"],[3,"ExprStructPathBuilder"],[3,"ExprStructFieldBuilder"],[3,"ExprCallBuilder"],[3,"ExprCallArgsBuilder"],[3,"ExprMethodCallBuilder"],[3,"ExprMethodCallArgsBuilder"],[3,"ExprRefBuilder"],[3,"ExprPathBuilder"],[3,"ExprAssignBuilder"],[3,"ExprAssignLhsBuilder"],[3,"ExprAssignOpBuilder"],[3,"ExprAssignOpLhsBuilder"],[3,"ExprIndexBuilder"],[3,"ExprIndexLhsBuilder"],[3,"ExprRepeatBuilder"],[3,"ExprRepeatLhsBuilder"],[3,"ExprLoopBuilder"],[3,"ExprIfBuilder"],[3,"ExprIfThenBuilder"],[3,"ExprIfThenElseBuilder"],[3,"ExprElseIfBuilder"],[3,"ExprElseIfThenBuilder"],[3,"ExprMatchBuilder"],[3,"ExprMatchArmBuilder"],[3,"ExprParenBuilder"],[3,"ExprFieldBuilder"],[3,"ExprTupFieldBuilder"],[3,"ExprSliceBuilder"],[3,"ExprVecBuilder"],[3,"ExprTryBuilder"],[3,"ExprClosureBuilder"],[3,"ExprClosureBlockBuilder"],[3,"ExprWhileBuilder"],[3,"ExprWhileBlockBuilder"],[3,"ExprTypeBuilder"],[3,"ExprTypeTyBuilder"],[3,"FnDeclBuilder"],[3,"ArgBuilder"],[3,"ArgPatBuilder"],[3,"GenericsBuilder"],[8,"ToIdent"],[8,"Invoke"],[3,"Identity"],[3,"ItemBuilder"],[3,"ItemFnDeclBuilder"],[3,"ItemFnBuilder"],[3,"ItemUseBuilder"],[3,"ItemUsePathBuilder"],[3,"ItemUsePathListBuilder"],[3,"ItemStructBuilder"],[3,"ItemTupleStructBuilder"],[3,"ItemEnumBuilder"],[3,"ItemExternCrateBuilder"],[3,"ItemMacBuilder"],[3,"ItemTyBuilder"],[3,"ItemTraitBuilder"],[3,"ItemTraitItemBuilder"],[3,"ItemTraitMethodBuilder"],[3,"ItemTraitTypeBuilder"],[3,"ItemImplBuilder"],[3,"ItemImplItemBuilder"],[3,"ItemImplMethodBuilder"],[3,"ItemConstBuilder"],[8,"IntoLifetime"],[8,"IntoLifetimeDef"],[3,"LifetimeDefBuilder"],[3,"LitBuilder"],[3,"MacBuilder"],[3,"MethodSigBuilder"],[8,"ToName"],[3,"PatBuilder"],[3,"PatRangeBuilder"],[3,"PatRangeExprBuilder"],[3,"PatEnumBuilder"],[3,"PatEnumPathBuilder"],[3,"PatStructBuilder"],[3,"PatStructPathBuilder"],[3,"PatStructFieldBuilder"],[3,"PatExprBuilder"],[3,"PatTupleBuilder"],[3,"PatRefBuilder"],[8,"IntoPath"],[3,"PathBuilder"],[3,"PathSegmentsBuilder"],[3,"PathSegmentBuilder"],[3,"TypeBindingBuilder"],[3,"PathSegmentReturnBuilder"],[3,"QPathBuilder"],[3,"QPathTyBuilder"],[3,"QPathQSelfBuilder"],[3,"SelfBuilder"],[3,"StmtBuilder"],[3,"StmtLetIdBuilder"],[3,"StmtExprBuilder"],[3,"StmtSemiBuilder"],[3,"StmtLetBuilder"],[3,"StmtLetTyBuilder"],[3,"StmtItemBuilder"],[8,"ToInternedString"],[3,"StructFieldBuilder"],[3,"TyBuilder"],[3,"TyPathBuilder"],[3,"TyQPathBuilder"],[3,"TySliceBuilder"],[3,"TyRefBuilder"],[3,"TyOptionBuilder"],[3,"TyResultOkBuilder"],[3,"TyResultErrBuilder"],[3,"TyPhantomDataBuilder"],[3,"TyBoxBuilder"],[3,"TyIteratorBuilder"],[3,"TyObjectSumBuilder"],[3,"TyObjectSumTyBuilder"],[3,"TyImplTraitTyBuilder"],[3,"TyTupleBuilder"],[3,"TyParamBuilder"],[3,"TyParamBoundBuilder"],[3,"TraitTyParamBoundBuilder"],[3,"PolyTraitRefBuilder"],[3,"VariantBuilder"],[3,"VariantDataBuilder"],[3,"VariantDataTupleBuilder"],[3,"VariantDataStructBuilder"],[3,"WherePredicateBuilder"],[3,"WhereBoundPredicateBuilder"],[3,"WhereBoundPredicateTyBuilder"],[3,"WhereBoundPredicateTyBoundsBuilder"],[3,"WhereRegionPredicateBuilder"],[3,"WhereEqPredicateBuilder"],[3,"AstBuilder"]]};
searchIndex["bitmap"] = {"doc":"See the `Bitmap` type.","items":[[3,"Bitmap","bitmap","A dense bitmap, intended to store small bitslices (&lt;= width of u64).",null,null],[3,"Slices","","Iterator over the bitslices in the bitmap",null,null],[3,"DynamicSize","","",null,null],[3,"OneBit","","Helper type for semantic-free values of fixed width",null,null],[3,"TwoBits","","Helper type for semantic-free values of fixed width",null,null],[3,"ThreeBits","","Helper type for semantic-free values of fixed width",null,null],[3,"FourBits","","Helper type for semantic-free values of fixed width",null,null],[3,"FiveBits","","Helper type for semantic-free values of fixed width",null,null],[3,"SixBits","","Helper type for semantic-free values of fixed width",null,null],[3,"SevenBits","","Helper type for semantic-free values of fixed width",null,null],[3,"EightBits","","Helper type for semantic-free values of fixed width",null,null],[8,"Element","","The &quot;element type&quot; of a bitmap",null,null],[16,"W","","Type passed to the `width` method.",0,null],[16,"R","","Type decoded from `from_bits` and thus `Bitmap::get`.",0,null],[10,"width","","Return the width of values of this type, in bits.",0,{"inputs":[{"name":"w"}],"output":{"name":"usize"}}],[10,"from_bits","","Decode a value from raw bits.",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[10,"to_bits","","Encode a value into raw bits.",0,{"inputs":[{"name":"r"}],"output":{"name":"u64"}}],[8,"Storage","","Storage for a slice of `usize`.",null,null],[10,"as_ref","","",1,null],[10,"as_mut","","",1,null],[11,"fmt","","",2,null],[11,"from_storage","","",2,{"inputs":[{"name":"usize"},{"name":"w"},{"name":"s"}],"output":{"name":"option"}}],[11,"get","","Get the `i`th bitslice, returning None on out-of-bounds or if `E::from_bits` returns None.",2,null],[11,"set","","Set the `i`th bitslice to `value`, returning false on out-of-bounds or if `value` contains\nbits outside of the least significant `E::width(w)` bits.",2,null],[11,"len","","Length in number of bitslices cointained.",2,null],[11,"usize_len","","Size of the internal buffer, in number of `usize`s.",2,null],[11,"iter","","",2,null],[11,"unwrap","","",2,null],[11,"next","","*NOTE*: This iterator is not &quot;well-behaved&quot;, in that if you keep calling\n`next` after it returns None, eventually it will overflow and start\nyielding elements again. Use the `fuse` method to make this\n&quot;well-behaved&quot;.",3,null],[11,"size_hint","","",3,null],[11,"first_set","","Return the index of the first bit set",2,null],[11,"width","","",4,{"inputs":[{"name":"usize"}],"output":{"name":"usize"}}],[11,"from_bits","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bits","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"width","","",5,null],[11,"from_bits","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bits","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"width","","",6,null],[11,"from_bits","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bits","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"width","","",7,null],[11,"from_bits","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bits","","",7,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"width","","",8,null],[11,"from_bits","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bits","","",8,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"width","","",9,null],[11,"from_bits","","",9,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bits","","",9,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"width","","",10,null],[11,"from_bits","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bits","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"width","","",11,null],[11,"from_bits","","",11,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bits","","",11,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}],[11,"width","","",12,null],[11,"from_bits","","",12,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bits","","",12,{"inputs":[{"name":"u64"}],"output":{"name":"u64"}}]],"paths":[[8,"Element"],[8,"Storage"],[3,"Bitmap"],[3,"Slices"],[3,"DynamicSize"],[3,"OneBit"],[3,"TwoBits"],[3,"ThreeBits"],[3,"FourBits"],[3,"FiveBits"],[3,"SixBits"],[3,"SevenBits"],[3,"EightBits"]]};
initSearch(searchIndex);
